name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write 
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.1'

      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release (contains alpha, beta, rc, etc.)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "docker_tag=dev" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "docker_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build binaries
        run: |
          mkdir -p build
          
          # Get git commit hash
          GIT_COMMIT=$(git rev-parse --short HEAD)
          
          # Linux AMD64 for the indexer and the API
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.Commit=${GIT_COMMIT} -X main.Version=${{ steps.version.outputs.version }}" -o build/indexer-linux-amd64 indexer/main.go
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.Commit=${GIT_COMMIT} -X main.Version=${{ steps.version.outputs.version }}" -o build/indexer-api-linux-amd64 api/main.go

    
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/*
          prerelease: ${{ steps.version.outputs.prerelease }}
          generate_release_notes: true
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            ### Installation for the indexer
            Download the binary for your platform and make it executable:
            ```bash
            chmod +x indexer-*
            ```

            You will need to set up the database for the indexer, check the docs for more information.
            When you have the database running run the cmd to create the database and the user.
            ```bash
            go run cmd/setup.go create-db --db-host localhost --db-port 5432 --db-user postgres --db-name postgres --ssl-mode disable --new-db-name gnoland --chain-name gnoland
            go run cmd/setup.go create-user --db-host localhost --db-port 5432 --db-user postgres --db-name postgres --ssl-mode disable --user writer --privilege writer
            ```

            From here you can run the indexer using live or historic mode
            ```bash
            ./indexer live --config config.yml
            ./indexer historic --config config.yml --from-height 1000 --to-height 2000
            ```

            For more information check the docs.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/cogwheel-validator/spectra-gnoland-indexer:${{ steps.version.outputs.version }}
            ghcr.io/cogwheel-validator/spectra-gnoland-indexer:${{ steps.version.outputs.docker_tag }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
